import matplotlib.pyplot as plt
import networkx as nx
import warnings

from time import time
from itertools import combinations, product

class HyperGraph:
    """"Undirected HyperGraph for game"""

    def __init__(self, nodes: set, hyperlinks: dict):
        """
        Create new HyperGraph
        :param nodes: list of nodes
        :param hyperlinks: dict hyperlinks by name
        """
        self._nodes = nodes
        self._hyperlinks = hyperlinks
        self._incidence_graph = None
        self._check_correct_hyperlink()
        if self._incidence_graph is None:
            self._create_incidence_graph()

    def get_nodes(self):
        return self._nodes

    def get_hyperlink_names(self):
        return self._hyperlinks.keys()

    def get_hyperlink(self, name: str):
        return self._hyperlinks[name]

    def _create_incidence_graph(self):
        g = nx.Graph()
        for player in self._nodes:
            g.add_node(player, bipartite=0)
        for name, hyperlink in self._hyperlinks.items():
            g.add_node(name, bipartite=1)
            for player in hyperlink:
                g.add_edge(name, player)
        self._incidence_graph = g

    def show(self):
        warnings.filterwarnings('ignore')
        players, hyperlinks = nx.bipartite.sets(self._incidence_graph)
        pos = {}
        pos.update(
            (node, (1, index))
            for index, node in enumerate(sorted(players, reverse=True))
        )
        pos.update(
            (node, (2, index))
            for index, node in enumerate(sorted(hyperlinks, reverse=True))
        )
        nx.draw(
            self._incidence_graph, pos=pos,
            with_labels=True, font_weight='bold',
            node_color='#AAAAAA', node_size=800,
            width=2
        )
        plt.show()

    def _check_correct_hyperlink(self):
        self._check_node_existence()
        self._check_cardinality()
        self._check_external_nodes()
        self._check_reduced()
        self._check_acycling()

    def _check_node_existence(self):
        for hyperlink in self._hyperlinks.values():
            for node in hyperlink:
                if node not in self._nodes:
                    raise ValueError("{} doesn't exist".format(node))

    def _check_cardinality(self):
        for name, hyperlink in self._hyperlinks.items():
            if len(hyperlink) < 2:
                raise ValueError('{} cardinality less than 2'.format(name))

    def _check_external_nodes(self):
        all_nodes_in_hyperlinks = set()
        for hyperlink in self._hyperlinks.values():
            all_nodes_in_hyperlinks.update(hyperlink)
        external_nodes = self._nodes.difference(all_nodes_in_hyperlinks)
        if external_nodes:
            raise ValueError('{} is/are external'.format(external_nodes))

    def _check_reduced(self):
        for name1, hyperlink1 in self._hyperlinks.items():
            for name2, hyperlink2 in self._hyperlinks.items():
                if name1 != name2:
                    if hyperlink1.issubset(hyperlink2):
                        raise ValueError(
                            '{} include {}'.format(name2, name1)
                        )

    def _check_acycling(self):
        if self._incidence_graph is None:
            self._create_incidence_graph()
        cycles = nx.cycle_basis(self._incidence_graph)
        if cycles:
            raise ValueError(
                'incidence_graph has cycle: {}'.format(cycles[0])
            )


class Bimatrix:
    """Bimaxtrix 2*2 for game"""

    def __init__(self, values: list):
        """
        Create new bimatrix
        :param values: [[(4, 8), (3, 6)], [(1, 3), (5, 6)]]
        """
        self._matrix = values

    def __getitem__(self, item):
        """Get element of matrix by [(i, j)] instead of [i][j]"""
        return self._matrix[item[0]][item[1]]

    def transpose(self):
        """Transpose matrix and swap payoffs"""
        matrix_T = [
            [(j, i) for i, j in row]
            for row in self._matrix
        ]
        matrix_T[1][0], matrix_T[0][1] = matrix_T[0][1], matrix_T[1][0]
        return Bimatrix(matrix_T)

    def maxmin_minmax(self):
        """Get the payoff using max min"""
        rows = [
            [i[0] for i in row]
            for row in self._matrix
        ]
        row = 0 if min(rows[0]) >= min(rows[1]) else 1
        cols = [
            [col[i] for col in rows]
            for i in range(len(rows[0]))
        ]
        col = 0 if max(cols[0]) <= max(cols[1]) else 1
        return rows[row][col]


class SimpleGame:
    def __init__(self, graph: HyperGraph, bimatrix: dict):
        """
        Create new SimpleGame
        :param graph: Undirected HyperGraph
        :param bimatrix: Bimatrix 2*2
        """
        self._graph = graph
        self._bimatrix = bimatrix
        self._check_correct_bimatrix()

    def _check_correct_bimatrix(self):
        for name in self._graph.get_hyperlink_names():
            hyperlink = sorted(self._graph.get_hyperlink(name))
            for node1, node2 in combinations(hyperlink, 2):
                if (node1, node2) not in self._bimatrix:
                    raise ValueError(
                        "Bimatrix for ({}, {}) doesn't exist".format(
                            node1, node2
                        )
                    )

    def get_all_coalitions(self):
        all_s = []
        hyperlink_names = self._graph.get_hyperlink_names()
        for i in range(1, len(hyperlink_names) + 1):
            all_s.extend(combinations(hyperlink_names, i))
        return all_s

    def get_complement(self, coalition: tuple):
        return set(self._graph.get_hyperlink_names()).difference(
            set(coalition)
        )

    def _get_max_function_complement(self):
        result = {}
        for s in self.get_all_coalitions():
            n_s = self.get_complement(s)
            all_pairs = set()
            all_players = set()

            for some_n_s in n_s:
                for players in combinations(
                        sorted(self._graph.get_hyperlink(some_n_s)), 2
                ):
                    all_pairs.add(players)
                    all_players.update(players)
            all_players = {
                i: j
                for i, j in zip(sorted(all_players), range(len(all_players)))
            }

            max_value = -float('inf')
            max_strategy = None
            for strategy in product(range(2), repeat=len(all_players)):
                current_value = 0
                for player1, player2 in all_pairs:
                    index1 = strategy[all_players[player1]]
                    index2 = strategy[all_players[player2]]
                    current_value += sum(
                        self._bimatrix[(player1, player2)][index1, index2]
                    )
                if current_value > max_value:
                    max_value = current_value
                    max_strategy = strategy

            result[s] = {
                i: j
                for i, j in zip(sorted(all_players), max_strategy)
            }

        return result

    def _get_ch_function_hyperlinks(self, strategies_by_coalition):
        result = {}
        for s in self.get_all_coalitions():
            fixed_strategy = strategies_by_coalition[s]
            all_pairs = set()
            all_players = set()

            for some_s in s:
                for players in combinations(
                        sorted(self._graph.get_hyperlink(some_s)), 2
                ):
                    all_pairs.add(players)
                    all_players.update(players)
            all_players = {
                i: j
                for i, j in zip(sorted(all_players), range(len(all_players)))
            }

            max_value = -float('inf')
            max_strategy = None
            for strategy in product(range(2), repeat=len(all_players)):

                check_good_strategy = True
                for player, player_position in all_players.items():
                    if player in fixed_strategy \
                            and fixed_strategy[player] != strategy[player_position]:
                        check_good_strategy = False
                        break
                if not check_good_strategy:
                    continue

                current_value = 0
                for player1, player2 in all_pairs:
                    index1 = strategy[all_players[player1]]
                    index2 = strategy[all_players[player2]]
                    current_value += sum(
                        self._bimatrix[(player1, player2)][index1, index2]
                    )
                if current_value > max_value:
                    max_value = current_value
                    max_strategy = strategy

            result[s] = (
                max_value,
                {
                    i: j
                    for i, j in zip(sorted(all_players), max_strategy)
                }
            )
        return result

    def _get_imputation_hyperlinks(self, ch_functions):
        fraction = ch_functions[
            tuple(sorted(self._graph.get_hyperlink_names()))
        ][0]
        v_s = {}
        for s, (value, _) in ch_functions.items():
            if len(s) == 1:
                v_s[s[0]] = value
        fraction -= sum(v_s.values())
        fraction /= len(v_s)
        return {
            s: ksi + fraction
            for s, ksi in v_s.items()
        }

    def _get_ch_functions_players(self):
        result = {}
        for hyperlink in self._graph.get_hyperlink_names():
            result[hyperlink] = {}
            pairs_by_player = {}

            for player1, player2 in combinations(
                    sorted(self._graph.get_hyperlink(hyperlink)), 2
            ):
                if player1 not in pairs_by_player:
                    pairs_by_player[player1] = set()
                if player2 not in pairs_by_player:
                    pairs_by_player[player2] = set()
                pairs_by_player[player1].add((player1, player2))
                pairs_by_player[player2].add((player1, player2))

            for player, pairs in pairs_by_player.items():
                result[hyperlink][player] = 0
                for player1, player2 in pairs:
                    bimatrix = self._bimatrix[(player1, player2)]
                    if player == player2:
                        bimatrix = bimatrix.transpose()
                    result[hyperlink][player] += bimatrix.maxmin_minmax()

        return result

    def _get_imputation_players(self, ch_functions, ksi):
        result = {}
        for hyperlink_name, chis in ch_functions.items():
            sum_chi = sum(
                chis.values()
            )
            for player, chi in chis.items():
                if player not in result:
                    result[player] = 0
                result[player] += chi * ksi[hyperlink_name] / sum_chi
        return result

    def calculate_imputations(self):
        fixed_strategies = self._get_max_function_complement()
        ch_functions_hyperlinks = self._get_ch_function_hyperlinks(
            fixed_strategies
        )
        ksi = self._get_imputation_hyperlinks(ch_functions_hyperlinks)
        ch_functions_players = self._get_ch_functions_players()
        eps = self._get_imputation_players(ch_functions_players, ksi)
        return ch_functions_hyperlinks, ksi, ch_functions_players, eps

    def calculate_and_print_report(self):
        start_time = time()
        (
            ch_functions_hyperlinks, imputations_hyperlinks,
            ch_functions_players, imputations_players
        ) = self.calculate_imputations()

        for coalition, (value, strategies) in ch_functions_hyperlinks.items():
            print(
                'v{} = {} (strategy: {})'.format(coalition, value, strategies))
        print()
        for s, ksi in imputations_hyperlinks.items():
            print("ksi('{}') = {}".format(s, ksi))
        print()
        for coalition, info in ch_functions_players.items():
            for player, value in info.items():
                print("v('{}' in {}) = {}".format(player, coalition, value))
        print()
        for player, eps in sorted(imputations_players.items()):
            print("eps('{}') = {}".format(player, eps))
        print('\nRun time: {} seconds'.format(time() - start_time))

if __name__ == '__main__':
    graph = HyperGraph(
        {'v1', 'v2', 'v3', 'v4', 'vc'},
        {
            'h1': {'v1', 'v2', 'vc'},
            'h2': {'v3', 'v4', 'vc'},
        }
    )
    game = SimpleGame(
        graph,
        {
            ('v1', 'vc'): Bimatrix([[(4, 8), (3, 6)], [(1, 3), (5, 6)]]),
            ('v1', 'v2'): Bimatrix([[(6, 8), (6, 0)], [(4, 3), (0, 6)]]),
            ('v2', 'vc'): Bimatrix([[(3, 6), (5, 5)], [(0, 2), (4, 8)]]),

            ('v3', 'vc'): Bimatrix([[(8, 0), (6, 10)], [(3, 6), (9, 3)]]),
            ('v4', 'vc'): Bimatrix([[(5, 2), (8, 9)], [(7, 2), (6, 5)]]),
            ('v3', 'v4'): Bimatrix([[(0, 1), (10, 4)], [(7, 0), (3, 8)]]),
        }
    )

    # graph = HyperGraph(
    #     {'v1', 'v2', 'v3', 'v4', 'vc1', 'vc2'},
    #     {
    #         'h1': {'v1', 'v2', 'vc1'},
    #         'h2': {'v3', 'vc1', 'vc2'},
    #         'h3': {'v4', 'vc2'},
    #     }
    # )
    # game = SimpleGame(
    #     graph,
    #     {
    #         ('v1', 'vc1'): Bimatrix([[(4, 8), (3, 6)], [(1, 3), (5, 6)]]),
    #         ('v1', 'v2'): Bimatrix([[(6, 8), (6, 0)], [(4, 3), (0, 6)]]),
    #         ('v2', 'vc1'): Bimatrix([[(3, 6), (5, 5)], [(0, 2), (4, 8)]]),
    #
    #         ('v3', 'vc1'): Bimatrix([[(8, 0), (6, 10)], [(3, 6), (9, 3)]]),
    #         ('v3', 'vc2'): Bimatrix([[(0, 1), (10, 4)], [(7, 0), (3, 8)]]),
    #         ('vc1', 'vc2'): Bimatrix([[(2, 5), (2, 7)], [(9, 8), (5, 6)]]),
    #
    #         ('v4', 'vc2'): Bimatrix([[(1, 4), (2, 7)], [(4, 0), (3, 5)]]),
    #     }
    # )

    graph.show()
    game.calculate_and_print_report()
